<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hong Chuan</title>
  
  
  <link href="http://redtecher.cn/atom.xml" rel="self"/>
  
  <link href="http://redtecher.cn/"/>
  <updated>2025-03-12T15:13:01.162Z</updated>
  <id>http://redtecher.cn/</id>
  
  <author>
    <name>Hong Chuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Review of IoT Firmware Vulnerabilities and Auditing Techniques</title>
    <link href="http://redtecher.cn/2025/03/12/A%20Review%20of%20IoT%20Firmware%20Vulnerabilities%20and%20Auditing%20Techniques/"/>
    <id>http://redtecher.cn/2025/03/12/A%20Review%20of%20IoT%20Firmware%20Vulnerabilities%20and%20Auditing%20Techniques/</id>
    <published>2025-03-12T15:10:50.000Z</published>
    <updated>2025-03-12T15:13:01.162Z</updated>
    
    <content type="html"><![CDATA[<p>物联网固件漏洞与审计技术研究综述</p><p>sensors   22 January 2024</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h2><p>在过去的十年中，许多研究集中在加强网络和应用层的物联网安全；然而，安全物联网基础设施的一个重要且经常被忽视的方面</p><p>2021年微软对安全格局的审查表明，由于固件安全原语的显著失效和支持，越来越多的攻击集中在物联网设备固件和BIOS (基本输入&#x2F;输出系统)上。</p><p>1.概述了固件安全的多个领域的相关工作，包括逆向工程、工具开发、审计机制以及机器学习中的初步相关工作。本文将物联网环境固有的局限性与现有的工具和审计机制进行耦合。</p><p>2、在现有文献的基础上，提出并分析跨越八个宽轴的物联网固件漏洞、它们各自的易感性触发器和域限制。尽管先前的一些研究的确关注了脆弱性谱的特定方面，但本文的目的不仅在于定义和分类脆弱性、挑战和相应的缓解措施，还在于将它们与利用向量和有助于识别脆弱性的审计工具进行映射。</p><p>3、进行了详细的软件脆弱性分析，讨论了逆向工程方法以及在静态和动态脆弱性分析领域中可用的最新解决方案和框架。提出了混合的漏洞审计方法，指出了现有审计技术的局限性，并提出了提高可扩展性、覆盖率、支持度和自动化程度的建议。这是一个传统上被忽视的领域，因为过去的方法提供的解决方案针对的是没有资源限制的开放系统，而现有的逆向工程工具侧重于激发系统行为，而不是识别漏洞。</p><p>4.总结了物联网固件安全领域的最新研究，包括框架统一、多平台和多架构支持、工具管理、机器学习和区块链技术，这些都在改善固件安全挑战、增加漏洞覆盖率的背景下进行，并为未来的研究提供了潜在的建议。</p><h2 id="2-相关工作"><a href="#2-相关工作" class="headerlink" title="2.相关工作"></a>2.相关工作</h2><p>主要关注点</p><h3 id="（1）接口安全："><a href="#（1）接口安全：" class="headerlink" title="（1）接口安全："></a>（1）接口安全：</h3><p>一是物联网硬件、软件、网络和应用领域的接口漏洞识别。</p><blockquote><h1 id="A-Survey-of-Security-Vulnerability-Analysis-Discovery-Detection-and-Mitigation-on-IoT-Devices"><a href="#A-Survey-of-Security-Vulnerability-Analysis-Discovery-Detection-and-Mitigation-on-IoT-Devices" class="headerlink" title="A Survey of Security Vulnerability Analysis, Discovery, Detection, and Mitigation on IoT Devices"></a>A Survey of Security Vulnerability Analysis, Discovery, Detection, and Mitigation on IoT Devices</h1><p>诸葛建伟</p></blockquote><p>二是消费者设备的接口安全和漏洞解决方案，详细介绍了远程劫持和控制物联网软件的机制，包括监视节点和物联网专用恶意软件构成的一般威胁。</p><h3 id="（2）审计技术"><a href="#（2）审计技术" class="headerlink" title="（2）审计技术"></a><font style="color:black;">（2）审计技术</font></h3><p>静态审计，动态审计，基本的漏洞审计，以及模糊测试，符号执行</p><h3 id="（3）逆向工程"><a href="#（3）逆向工程" class="headerlink" title="（3）逆向工程"></a>（3）逆向工程</h3><p>对商用物联网设备进行逆向工程评估，故障注入等，研究弱验证、设备能力和后门。</p><p>系统·仿真成为研究主题。</p><h3 id="（4）新兴领域"><a href="#（4）新兴领域" class="headerlink" title="（4）新兴领域"></a>（4）新兴领域</h3><p>区块链，机器学习，主要是讲区块链技术的应用接入对信息交互的加密</p><h3 id="（5）商业开发"><a href="#（5）商业开发" class="headerlink" title="（5）商业开发"></a>（5）商业开发</h3><p>ARM公司TrustZone为用户提供了基于硬件的安全扩展，建立信任根( RoT )和加密服务，以安全地存储关键(固件)数据，这是对传统可信平台模块( TPM )的改进。TrustZone允许通过(基于硬件的)隔离驱动更广泛的托管敏感服务集；</p><p>Intel Turstlite 是一种适用于低功耗嵌入式设备的通用安全架构，允许远程管理、身份验证、空中更新( over the air，OTA )和远程证明。</p><p>低成本方案，IoTware内存访问控制也可以使用SMART 实现，使用带有密钥的ROM测量例程来提供远程证明。</p><h2 id="3-固件漏洞：影响与挑战"><a href="#3-固件漏洞：影响与挑战" class="headerlink" title="3.固件漏洞：影响与挑战"></a>3.固件漏洞：影响与挑战</h2><p>物联网中多种技术的融合使得物联网设备对多种攻击向量的敏感度更高。</p><p>先前的研究有多种方法根据其偏好的判别器对漏洞进行聚类：</p><p>攻击源(物理的、本地的、网络的、互联网的)，</p><p>威胁性质(硬件、操作系统、软件、交互)，</p><p>TCP&#x2F;IP协议族层，</p><p>环境(现货,企业级)</p><p>影响(拒绝服务、僵尸主机、损害QoS、数据泄露等)。</p><h3 id="（1）系统属性"><a href="#（1）系统属性" class="headerlink" title="（1）系统属性"></a>（1）系统属性</h3><ul><li>软件损坏：物联网固件天生容易受到软件损坏的影响，例如在服务启动或运行时或升级过程中引入的编码错误。自带的指针违例、类型混乱等问题，恶意代码注入，特权指令编程问题，暴露在固件威胁中。</li><li>内存管理</li></ul><p>无效的有害的代码会导致整数溢出、缓冲区溢出，内存限制加剧安全漏洞的原因。</p><p>基于硬件的信任管理( HTM )被认为是一种最优的解决方案，但空间和财务成本再次可能使其不适用于物联网软件。</p><p>采用HTM还受到物联网系统中缺乏专用内存管理单元( MMU )的限制，导致频繁的内存违规行为。</p><ul><li>错误配置</li></ul><h3 id="2-接入机制"><a href="#2-接入机制" class="headerlink" title="(2) 接入机制"></a>(2) 接入机制</h3><p>接入、身份验证和凭证管理在修补物联网节点很常见，一般采用OTA更新的方式</p><ul><li>访问控制</li><li>授权</li></ul><h3 id="（3）组件复用"><a href="#（3）组件复用" class="headerlink" title="（3）组件复用"></a>（3）组件复用</h3><p>硬件和软件组件的重用，包括现成的板卡、电路、传感器、启动程式或软件库。</p><p>用以减少物联网领域的开发时间和相关成本，同时无意中忽略了由于异构交叉连接而产生的漏洞。在多控制器系统中，来自不同厂商的固件需要对每个单独的组件进行全面的安全分析和测试。</p><p>在一个控制器或可利用的软件中的固件漏洞可能导致级联威胁，扰乱整个操作，并导致一系列不安全的物联网设备的大规模生产</p><p>开发资源，不断发展的IOT应用使得供应商雇佣有限专业知识的开发人员开发固件</p><h3 id="（4）网络接口"><a href="#（4）网络接口" class="headerlink" title="（4）网络接口"></a>（4）网络接口</h3><p>物联网设备通过多种接口类型和网络协议与其他异构系统进行交互。然而，这可能转化为应用程序编程接口( API )和协议易感性，使潜在的攻击者有机会损害设备功能和可访问性。</p><ul><li>Web Services</li></ul><p>物联网设备通过一系列Web API与云、雾、边缘计算和监控系统进行通信。不安全、设计不良的Web服务仍然是设备利用的主要原因之一，允许通过应用程序级和基于固件的攻击。</p><p>IoTReaper，已经成功地利用物联网Web接口对设备软件发起了各种各样的攻击</p><ul><li>网络协议</li></ul><p>供应商使用广泛的标准化和专有网络协议，当与可重用的硬件和软件组件相结合时，可能会导致物联网软件中现有安全问题的传播。</p><p>蜜罐记录了将近98 %的物联网软件的网络相关攻击发生在不安全的Telnet接口上</p><ul><li>污染数据</li></ul><p>传感器和驱动服务通过相关的雾和云节点处理可能需要采集、浏览、验证、处理和净化的传入数据。从感知或执行器门户获取的数据，如果被污染或变形，会淹没设备的可操作性，并使设备固件面临安全风险</p><h3 id="（5）镜像管理"><a href="#（5）镜像管理" class="headerlink" title="（5）镜像管理"></a>（5）镜像管理</h3><ul><li>存储完整：安全分发，OTA，设备可能运行几年前的固件</li><li>更新交付</li></ul><h3 id="6-用户认知"><a href="#6-用户认知" class="headerlink" title="(6) 用户认知"></a>(6) 用户认知</h3><p>1.自动化与人工干预的关系</p><p>2.优化更新，供应商和用户之间的责任担当问题</p><h3 id="7-规则遵从"><a href="#7-规则遵从" class="headerlink" title="(7)规则遵从"></a>(7)规则遵从</h3><p>1.标准化：现有的物联网软件法规</p><p>2.发展监督，ODM OEM 协调问题</p><h3 id="8-对抗向量建模"><a href="#8-对抗向量建模" class="headerlink" title="(8)对抗向量建模"></a>(8)对抗向量建模</h3><p>1.本地和远程向量：</p><p>远程或网络上的对抗因素可以通过恶意软件感染系统，而本地对手可以窃听和干扰设备通信。基于隐身的敌手可以从更近的物理距离或远程攻击，伪装成一个真实的实体，并获得对物联网生态系统的不必要的访问。</p><p>2.侧信道攻击</p><p>可以由物理非入侵实体进行，而入侵对手可以完全超越认证机制，向物联网设备证明其身份，旨在通过软硬件修改来获取信息或利用设备行为。</p><p>3.混合设计</p><h2 id="4-漏洞审计"><a href="#4-漏洞审计" class="headerlink" title="4.漏洞审计"></a>4.漏洞审计</h2><p>固件审计是一项手动密集型任务，需要评估人员在逆向工程( RE )和大量静态( SA )和动态分析( DA )技术方面的专业知识。需要对相应的固件进行系统化处理，以确保其与所选审计方法的兼容性。</p><h2 id="4-1-逆向工程"><a href="#4-1-逆向工程" class="headerlink" title="4.1 逆向工程"></a>4.1 逆向工程</h2><p>固件审查过程的一部分，首先要执行一系列的逆向工程任务，包括二进制文件的获取、解包和反编译，以访问源代码。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/47776519/1741768462012-3a5e7318-e45f-4f30-8c34-a7831d3cc7e0.png"></p><h3 id="固件获取"><a href="#固件获取" class="headerlink" title="固件获取"></a>固件获取</h3><p>固件可以从供应商仓库获得，从设备本地提取，或者在OTA更新期间拦截并保存。使用网络爬虫和脚本技术的固件采集自动化也是可能的，基于FTP的专用镜像服务器仍然是首选的选择。</p><p>可以通过JTAG和UART端口或使用取证分析技术从设备中获取代码。设备显示和更新服务器可以使用OTA更新调度设备固件的定期升级。</p><p>建立中央存储库来聚合来自多个供应商的固件代码，以加快和扩展审计程序仍然是一个长期的测试人员需求。</p><h4 id="硬件解包"><a href="#硬件解包" class="headerlink" title="硬件解包"></a>硬件解包</h4><p>二进制打包的标准和方案通常是特定于供应商的，并且被认为是专有的。</p><p>Binwalk 和BANG 使用递归解包。</p><p>FMK 和FACT 则专注于基于Linux的平台。</p><p>ANGR是一个基于python的平台，提供二进制分析、自动解包固件、控制流分析、符号执行以及与Linux、Windows和MAC平台的兼容性。</p><h4 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h4><p>反编译机器码需要在更高级的语言中具有更大的人类可读性，包括反汇编、数据流、控制流分析和数据类型检查</p><p>流行的反编译工具包括Radare2 [ 122 ]和Binary Ninja [ 121 ]，并提供(可选) GUI支持的二进制分析功能。IDA Pro [ 124 ]和Ghidra [ 123 ]具有交互式拆卸和多体系结构支持等多种特性。KLEE [ 48 ]使用了资源消耗相对较重的符号VM处理( LLVM )编译器。</p><h3 id="挑战："><a href="#挑战：" class="headerlink" title="挑战："></a>挑战：</h3><p>打包逻辑：打包者不对代码功能进行修改，使得代码的呈现具有顺序性，不便于进行安全性分析。因此，使用自动动态分析相对于人工阅读可以产生更好的结果，为许多固件解决方案提供审计可扩展性。测试框架，包括FAT 和QEMU ，通过结合一些漏洞评估工具和仿真来简化分析。</p><p>缓解技术：除了加密打包，供应商可能会诉诸反编译缓解，增加固件源检查障碍。</p><p>元数据不可用：伪装设备元数据以避免基于硬件的黑客攻击，可以通过限制产品发布、更新日志和版本号的信息以及反编译器选择的硬件架构，无意中使安全审计过程复杂化</p><h3 id="4-2-审计技术"><a href="#4-2-审计技术" class="headerlink" title="4.2 审计技术"></a>4.2 审计技术</h3><p>分为静态审计方案和动态审计方案</p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>静态分析包括手动和密集扫描源代码的规则集模式，以识别编码错误。</p><p>静态分析不涉及固件的实际执行或仿真，也不要求审计人员对物联网设备进行物理访问以进行审查。</p><p>使用静态分析确定的典型漏洞包括无效引用、缓冲区溢出和内存损坏缺陷、分割错误和未初始化变量。</p><p>使用工具进行自动化子流程。</p><p>误报风险比较大。，代码混淆，加密会阻碍静态分析</p><p>静态分析策略分为6类：手动分析、自动化和并行化、基于解析的分析、控制流图、机器学习方法、确定后门。</p><p>手动分析的一个典型例子是2012年的针对Android应用的啄木鸟</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/47776519/1741770257035-27704324-8ff9-44fc-ac38-0c619470eb3b.png"></p><p>Firmalice使用了一种自动化和并行化的方法，将程序切片，并使用符号执行引擎来执行记录漏洞的并行函数。该工具具有理解安全策略和FirmUp识别特权指令的能力。</p><p>Angr -&gt; FirmUp</p><p>机器学习已经被用于通过在现有的静态分析技术中结合模式识别来实现更高的自动化。2016年，Feng [ 136 ]引入了一种名为Genius的算法，通过结合机器学习和计算机视觉技术来解决控制流图的可扩展性问题。</p><p>HumIDIfy使用机器学习将具有预期固件行为的配置文件和二进制功能描述语言来识别任何隐藏的功能，并将其与实时代码行为进行比较。如果发现预期行为和实时行为之间存在差异，则假定固件具有隐藏功能。虽然这是一种新颖的方法，但它不能被视为一个完整的解决方案，因为它需要专家的人类知识和固件元数据，以避免产生大量的误报。</p><p>后门的使用。基于固件自动静态分析的工具Stringer试图解决这个问题。</p><p>在类似的研究中，一种名为通用固件漏洞观察器( UFO ) [的工具被提出，可以用于固件漏洞，逆向，确定密码泄漏，并使用新开发的名为Shell Script Dependency ( ShDep )的算法找到后门。</p><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>动态方案执行固件代码，允许审计人员在不需要访问程序内部信息的情况下观察系统行为。动态分析需要元数据信息来优化固件仿真。然而，在不了解底层结构的情况下，镜像一般总是不能被仿真，因此当无法进行自动仿真时，动态分析不能很好地扩展，因为它需要重复地定制仿真和配置设置。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/47776519/1741770655731-8d199c25-b232-411e-bea3-7dbbfc800f2e.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/47776519/1741770667851-2c5308ca-a6eb-4a6f-a6b3-a6b6d00d6b47.png"></p><p>FIE ：通过调用中断处理程序观察行为来检查外设的内存位置从而进行分析。FIE保存了所有先前分析过的状态的记录，使用状态剪枝和内存污迹进行过滤。</p><p>符号执行：用于确定能够实时定义并完整描述固件停滞和运行状态的方程。利用符号执行，模拟外设，实时生成输入进行执行和测试。</p><p>Laelaps,μEmu,Gerbil:这些工具可以运行各种嵌入式设备软件，而无需将任何特定的设备相关信息编码到仿真器中。</p><p>Gerbil 是Angr 静态工具的扩展用于测试日常智能设备中的权限分离漏洞</p><p>通过QEMU 开发了一些多用途框架来执行全系统仿真支持的动态分析，它模拟了I &#x2F; O和内核操作。这样的框架之一是Avatar ，能够对嵌入式设备固件进行动态分析，在物联网领域具有同样的适用性；</p><p>Zed Attack Proxy ( ZAP )、Nmap和Nessus等开源安全扫描工具对嵌入式Web接口进行测试，可以在不需要实际硬件的情况下识别基于Linux系统的漏洞，然后使用Metasploit进行漏洞利用。</p><p>工业物联网，帕拉维西尼等人提出的动态框架使用了多种方法，包括二进制分析工具，网络推理系统，模糊器，以及OpenPLC，Firmadyne和QEMU等安全分析虚拟化解决方案。</p><p>这是一种三阶段的方法，从提取固件二进制大型程序开始，提取用于仿真的代码，进一步仿真代码，并使用模糊测试和符号执行等多项技术分析漏洞的结果。</p><p>FIoT：允许识别受限物联网固件中的内存损坏问题。</p><p>处理器-外设接口建模( Processor- Peripheral Interface Modeling，P2IM )软件框架，该框架基于一个现成的fuzzer输入到固件二进制进行审计。P2IM使用外设的抽象建模来生成固件模型；它还利用来自制造商设备文档的信息来理解可接受的处理器-外设接口输入。</p><p>作为P2IM的扩展，DICE框架被用于模拟固件分析中的直接内存访问( DMA )通道。该框架与硬件无关，将DMA输入通道识别和抽象为固件与DMA控制器中的源和指定DMA传输点进行通信。DICE可以操纵通过DMA传输的输入进行分析，并集成在P2IM框架中。</p><h3 id="混合方法"><a href="#混合方法" class="headerlink" title="混合方法"></a>混合方法</h3><p>将静态的二元分析与动态的实时调查相结合的混合方法是扩大审计覆盖面的一个有价值的选择。可以使用审计技术的混合组合来提高未知漏洞的检测效率。</p><p>DroidRay 通过在APK文件检查期间依靠动态分析和在扫描病毒期间依靠静态分析来发现Android设备中的恶意代码。</p><p>Mechanical Phish，一种结合模糊测试，符号执行的混合漏洞检测框架。</p><p>混合技术还可以依靠模糊测试，使用恶意的输入模式来触发意想不到的设备操作。</p><p>IoTFuzzer 使用黑盒方法来检测可能的内存损坏漏洞。</p><p>Firm-AFL的灰盒模糊器，它支持可以通过Firmadyne 仿真的固件集。</p><h3 id="动态与静态的讨论"><a href="#动态与静态的讨论" class="headerlink" title="动态与静态的讨论"></a>动态与静态的讨论</h3><p>选择上：与静态分析相比，动态分析更受从业者的青睐，尽管后者本质上具有较高的漏洞判定效率，因为复杂的逆向工程和紧密的软硬件耦合为静态审计提出了额外的挑战。近年来，模糊测试和混合方法也得到了广泛的应用。</p><p>可以开发包含静态、动态和混合技术的框架来进行准确识别。</p><p>分析范围上来看：几类漏洞需要审计分析，包括系统属性、访问机制、网络、代码重用</p><p>局限性：由于物联网软件的异构性，审计工具主要专注于识别和复制已识别的攻击，而只有少数解决方案专注于发现零日漏洞。现有工具的通用性是值得怀疑的，因为它们大多只覆盖漏洞的特定类或子类。</p><p>一些解决方案如ANGR [ 120 ]、Genius [ 136 ]、Gemini [ 40 ]、Avatar [ 85 ]和DICE [ 38 ]等由于其潜在的方法论，可以检测出许多漏洞，但也可能表现出很高的误报率。</p><p>就未来趋势而言，研究越来越聚焦于机器学习和区块链技术。ML和区块链可以在一定程度上为固件审计带来进一步的灵活性、适应性和自动化。然而，充分利用这些技术的潜在应用仍然是一个开放的倡议。</p><h2 id="5-当代研究和开放性挑战"><a href="#5-当代研究和开放性挑战" class="headerlink" title="5.当代研究和开放性挑战"></a>5.当代研究和开放性挑战</h2><p>在标准化、技术修正和设计创新这三个不可或缺的组成部分中，现代研究与前沿技术之间的关系得到了理顺。图2说明了未来的研究方向和相应的挑战。</p><h3 id="1-Standardization"><a href="#1-Standardization" class="headerlink" title="1.Standardization"></a>1.Standardization</h3><p><font style="color:rgb(64, 64, 64);">讨论了固件审计框架的统一和固件栈及指令集的标准化。</font></p><h5 id="Unification"><a href="#Unification" class="headerlink" title="Unification"></a><font style="color:rgb(64, 64, 64);">Unification</font></h5><p><font style="color:rgb(64, 64, 64);">探讨了统一固件审计框架的必要性和方法。</font></p><p><font style="color:rgb(64, 64, 64);"></font></p><h3 id="2-技术补救"><a href="#2-技术补救" class="headerlink" title="2.技术补救"></a><font style="color:rgb(64, 64, 64);">2.技术补救</font></h3><p>1.分析方法</p><p>将ML作为逆向工程的一部分，将通过连接相关信息为人类分析提供任务的自动化。具体来说，ML可以利用多个架构中已识别的匹配问题和通过联邦学习( Federal Learning，FL )聚合的学习模型来实现自动化训练。利用FL可以在聚合服务器上融合提取的ML模型，并加快不同漏洞类别的逆向工程任务，从设备类型提供的整个特征集中整体识别威胁。</p><p>扩展QEMU和类似的仿真器技术，并由ML重新实施，可以帮助识别任何现有的漏洞模式。仿真还可以利用区块链辅助的联邦学习来激励本地模型训练，并定期更新全局漏洞分类模型[ 57 ]。传统ML系统中统计输入特征的手工精加工也是可以实现的；因此，不断发展的叙事已经诉诸于深度学习( DL )结构作为一种可行的替代方案。固件安全性分析还可以利用DL技术来提供包含设备pr的原始数据</p><h3 id="3-设计创新"><a href="#3-设计创新" class="headerlink" title="3.设计创新"></a>3.设计创新</h3><p>从安全角度考虑，操作系统与底层硬件架构的兼容性非常重要。任何对设备操作不必要的库和包的移除都会降低潜在漏洞利用的可能性。虽然开发人员一直担心在物联网软件中集成标准化的平台，如UEFI，但该领域仍有待进一步研究</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;物联网固件漏洞与审计技术研究综述&lt;/p&gt;
&lt;p&gt;sensors   22 January 2024&lt;/p&gt;
&lt;h2 id=&quot;1-引言&quot;&gt;&lt;a href=&quot;#1-引言&quot; class=&quot;headerlink&quot; title=&quot;1.引言&quot;&gt;&lt;/a&gt;1.引言&lt;/h2&gt;&lt;p&gt;在过去的十</summary>
      
    
    
    
    <category term="IOT" scheme="http://redtecher.cn/categories/IOT/"/>
    
    
    <category term="论文阅读报告" scheme="http://redtecher.cn/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>MISC流量分析题</title>
    <link href="http://redtecher.cn/2024/11/23/post/"/>
    <id>http://redtecher.cn/2024/11/23/post/</id>
    <published>2024-11-23T03:04:19.000Z</published>
    <updated>2024-11-23T03:41:53.081Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /># <font style="color:rgb(29, 33, 41);">1.流量分析1</font>拉入科来流量分析<p><img src="https://cdn.nlark.com/yuque/0/2024/png/47776519/1732171335315-084b0fb5-dc39-4cd5-b153-e07d55e510a1.png"></p><p>很明显应该在http request和response里面</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47776519/1732171292337-c931dcf7-bc5f-452d-a8b0-364c8b185125.png"></p><p>明显发现有select from flag 字样 而且有%25</p><p>所以应该是进行了两层url编码</p><p>解析一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">encoded_str  = <span class="string">&#x27;/index.php?url=gopher://127.0.0.1:80/_POST%20%2Fadmin.php%20HTTP%2F1.1%250d%250aHost%3A%20localhost%3A80%250d%250aConnection%3A%20close%250d%250aContent-Type%3A%20application%2Fx-www-form-urlencoded%250d%250aContent-Length%3A%2078%250d%250a%250d%250aid%253D1%2529%2520and%2520if%2528%2528ascii%2528substr%2528%2528select%2520flag%2520from%2520flag%2529%252C1%252C1%2529%2529%253D%252740%2527%2529%252Csleep%25283%2529%252C0%2529%2520--%2520&#x27;</span></span><br><span class="line"><span class="comment"># s1 =&quot;%29%2C1%2C1%29%29%3D%2740%27%29%2C&quot;</span></span><br><span class="line"><span class="comment"># wd = parse.quote(keyword.encode(&#x27;utf-8&#x27;))</span></span><br><span class="line"><span class="comment"># ress = parse.quote(wd.encode(&#x27;gb2312&#x27;))</span></span><br><span class="line">decode_str = parse.unquote(encoded_str)</span><br><span class="line">dedecode_str = parse.unquote(decode_str)</span><br><span class="line"><span class="built_in">print</span>(dedecode_str)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/index.php?url=gopher://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">80</span>/_POST /admin.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: localhost:<span class="number">80</span></span><br><span class="line">Connection: close</span><br><span class="line">Content-<span class="type">Type</span>: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: <span class="number">78</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span>=<span class="number">1</span>) <span class="keyword">and</span> <span class="keyword">if</span>((<span class="built_in">ascii</span>(substr((select flag <span class="keyword">from</span> flag),<span class="number">1</span>,<span class="number">1</span>))=<span class="string">&#x27;40&#x27;</span>),sleep(<span class="number">3</span>),<span class="number">0</span>) </span><br></pre></td></tr></table></figure><p>分析这行sql语句意思，如果选择字符ascii等于40,那么延迟3秒</p><p>应该是进行sql盲注</p><h1 id="2-流量分析2"><a href="#2-流量分析2" class="headerlink" title="2.流量分析2"></a>2.流量分析2</h1><p>拉入科来</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47776519/1732239116277-b8c3f32f-02ed-4ce0-a06e-da1975b0232a.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47776519/1732239148138-26028d06-b859-4fda-a1d4-176bd40d0e61.png"></p><p>用get方法获取html页面</p><p>过滤一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srcip=<span class="number">39.105</span><span class="number">.136</span><span class="number">.196</span> <span class="keyword">and</span> protocol=http</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47776519/1732239062844-1f7047b3-a6db-4a89-9955-61dd0e7aaeaa.png"></p><p>生成flag为 flag{17uajil}</p><h1 id="3-easycap"><a href="#3-easycap" class="headerlink" title="3.easycap"></a>3.easycap</h1><p>拉入科来</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47776519/1732239486589-ac7058b2-4baf-4ca5-a5a1-9272f545d445.png"></p><p>点开看 每个额外数据都有</p><p>字符</p><p>写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">cap = pyshark.FileCapture(<span class="string">&quot;d5ba8f87969145059170a222f01e7883.pcap&quot;</span>, tshark_path=<span class="string">&quot;D:\Program Files\Wireshark\\tshark.exe&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cap)</span><br><span class="line"><span class="keyword">for</span> pkt <span class="keyword">in</span> cap:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(pkt.length)==<span class="number">67</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(pkt.tcp.payload).decode(<span class="string">&#x27;utf-8&#x27;</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>简单解码解析，组装输出payload值 </p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47776519/1732241357548-2a5cbbc3-ec40-4121-94a0-e23836dd8ab7.png"></p><h1 id="4-流量分析"><a href="#4-流量分析" class="headerlink" title="4.流量分析"></a>4.流量分析</h1><p>拉入进行流量分析，筛选http协议</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47776519/1732246195514-a0ba8d5b-e21e-4fca-9ad0-3d0a72b71fc5.png"></p><p>显然是盲注攻击</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47776519/1732246217952-39b99e5b-7fd8-409a-8cd9-0998fd7c9bf0.png"></p><p>筛选数据包，如果sql注入攻击失败，返回http_response 数据包大小为661</p><p>注入成功返回数据包大于661 </p><p>所以进行筛选</p><p>写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">cap = pyshark.FileCapture(<span class="string">&quot;4d7c14206a5c4b74a0af595992bbf439.pcapng&quot;</span>, display_filter=<span class="string">&#x27;http&#x27;</span>, tshark_path=<span class="string">&quot;D:\Program Files\Wireshark\\tshark.exe&quot;</span>)</span><br><span class="line"><span class="comment"># print(cap)</span></span><br><span class="line">flagit = [<span class="string">&#x27;.&#x27;</span>*<span class="number">40</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line">p1 = <span class="string">r&#x27;flag%20limit%200,1\),(\d+),1\)&#x27;</span></span><br><span class="line">p2 = <span class="string">r&#x27;,1\)\)=(\d+)%23&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pkt <span class="keyword">in</span> cap:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(pkt.length) &lt; <span class="number">600</span>: <span class="comment"># 当包长度小于 650 时为请求包，记录uri 和 时间</span></span><br><span class="line">        time_s = pkt.sniff_time</span><br><span class="line">        url = pkt.http.request_full_uri</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">int</span>(pkt.length) &gt; <span class="number">661</span>):</span><br><span class="line">            k = re.findall(p1,<span class="built_in">str</span>(url))</span><br><span class="line">            d = re.findall(p2,<span class="built_in">str</span>(url))</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">int</span>(k[<span class="number">0</span>]))</span><br><span class="line">            flagit[<span class="built_in">int</span>(k[<span class="number">0</span>])-<span class="number">1</span>]=<span class="built_in">chr</span>(<span class="built_in">int</span>(d[<span class="number">0</span>]))</span><br><span class="line">flag =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag.join(flagit))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47776519/1732246244172-ecd4ae63-8f39-4ea4-9feb-8b780ec5fa1b.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;c2bbf9cecdaf656cf524d014c5bf046c&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;
# &lt;font style=&quot;color:rgb(29, 33, 41);&quot;&gt;1.流量分析1&lt;/font&gt;
拉入科来流量分析

&lt;p&gt;&lt;img src=&quot;https://cdn.nlar</summary>
      
    
    
    
    <category term="CTF" scheme="http://redtecher.cn/categories/CTF/"/>
    
    
    <category term="流量分析，MISC" scheme="http://redtecher.cn/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%EF%BC%8CMISC/"/>
    
  </entry>
  
</feed>
